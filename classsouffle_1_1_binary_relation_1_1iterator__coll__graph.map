<map id="souffle::BinaryRelation&lt; TupleType &gt;::iterator" name="souffle::BinaryRelation&lt; TupleType &gt;::iterator">
<area shape="rect" id="node7" href="$classsouffle_1_1_trie.html" title="{souffle::Trie\&lt; 1 \&gt;\n||+ begin()\l+ clear()\l+ contains()\l+ contains()\l+ empty()\l+ end()\l+ find()\l+ find()\l+ getBoundaries()\l+ getBoundaries()\land 8 more...\l&#45; contains_internal()\l&#45; getBeginCoreIterator()\l&#45; insert_internal()\l}" alt="" coords="831,1843,989,2111"/>
<area shape="rect" id="node8" href="$classsouffle_1_1detail_1_1_trie_base.html" title="{souffle::detail::TrieBase\l\&lt; Dim, Trie\&lt; Dim \&gt; \&gt;\n||+ contains()\l+ getHintStatistics()\l+ insert()\l}" alt="" coords="831,1430,989,1551"/>
<area shape="rect" id="node9" href="$structsouffle_1_1detail_1_1_trie_base_1_1hint__statistics.html" title="{souffle::detail::TrieBase\l\&lt; Dim, Derived \&gt;::hint\l_statistics\n||}" alt="" coords="831,931,989,1037"/>
<area shape="rect" id="node10" href="$classsouffle_1_1_cache_access_counter.html" title="A utility class to keep track of cache hits/misses. " alt="" coords="812,525,1009,705"/>
<area shape="rect" id="node13" href="$classsouffle_1_1_sparse_array.html" title="{souffle::SparseArray\l\&lt; nested_trie_type *,\l 6, nested_trie_merger,\l nested_trie_cloner \&gt;\n||+ addAll()\l+ begin()\l+ clear()\l+ dump()\l+ empty()\l+ end()\l+ find()\l+ find()\l+ get()\l+ get()\land 17 more...\l&#45; clean()\l&#45; dump()\l&#45; getFirstInfo()\l&#45; getFirstVersion()\l&#45; getLeaf()\l&#45; getRootInfo()\l&#45; getRootVersion()\l&#45; inBoundaries()\l&#45; raiseLevel()\l&#45; raiseLevel()\l&#45; tryUpdateFirstInfo()\l&#45; tryUpdateRootInfo()\l&#45; clone()\l&#45; findFirst()\l&#45; freeNodes()\l&#45; getIndex()\l&#45; getLevelMask()\l&#45; getMemoryUsage()\l&#45; inBoundaries()\l&#45; merge()\l&#45; newNode()\l}" alt="" coords="1129,1203,1284,1779"/>
<area shape="rect" id="node17" href="$structsouffle_1_1_sparse_array_1_1_root_info.html" title="A struct describing all the information required by the container class to manage the wrapped up tree..." alt="" coords="1015,931,1163,1037"/>
<area shape="rect" id="node19" href="$structsouffle_1_1_sparse_array_1_1_node.html" title="The node type of the internally maintained tree. " alt="" coords="1217,561,1365,668"/>
<area shape="rect" id="node20" href="$unionsouffle_1_1_sparse_array_1_1_cell.html" title="The value stored in a single cell of a inner or leaf node. " alt="" coords="1555,931,1703,1037"/>
<area shape="rect" id="node25" href="$classsouffle_1_1_binary_relation.html" title="{souffle::BinaryRelation\l\&lt; TupleType \&gt;\n||+ begin()\l+ clear()\l+ closure()\l+ contains()\l+ end()\l+ extend()\l+ find()\l+ findBetween()\l+ frontProduct()\l+ getBoundaries()\land 7 more...\l# containsElement()\l&#45; generateTrieIfNone()\l}" alt="" coords="1015,1843,1168,2111"/>
<area shape="rect" id="node26" href="$classsouffle_1_1shared__mutex.html" title="{souffle::shared_mutex\n||+ lock()\l+ lock_shared()\l+ shared_mutex()\l+ try_lock()\l+ try_lock_shared()\l+ unlock()\l+ unlock_shared()\l}" alt="" coords="2435,532,2585,697"/>
<area shape="rect" id="node30" href="$classsouffle_1_1_sparse_disjoint_set.html" title="{souffle::SparseDisjointSet\l\&lt; DomainInt \&gt;\n||+ begin()\l+ beginReps()\l+ clear()\l+ contains()\l+ end()\l+ endReps()\l+ findNode()\l+ makeNode()\l+ nodeExists()\l+ operator=()\land 6 more...\l&#45; toDense()\l}" alt="" coords="1950,1364,2124,1617"/>
<area shape="rect" id="node32" href="$classsouffle_1_1_disjoint_set.html" title="Structure that emulates a Disjoint Set, i.e. " alt="" coords="2155,843,2288,1125"/>
<area shape="rect" id="node35" href="$classsouffle_1_1concurrent__list.html" title="{souffle::concurrent\l_list\&lt; std::atomic\&lt;\l block_t \&gt; * \&gt;\n||+ at()\l+ clear()\l+ concurrent_list()\l+ concurrent_list()\l+ operator=()\l+ operator[]()\l+ push_back()\l+ size()\l+ ~concurrent_list()\l}" alt="" coords="2087,163,2221,387"/>
<area shape="rect" id="node34" href="$classsouffle_1_1_block_list.html" title="{souffle::BlockList\l\&lt; std::atomic\&lt; block_t \&gt; \&gt;\n||+ add()\l+ begin()\l+ BlockList()\l+ BlockList()\l+ BlockList()\l+ clear()\l+ end()\l+ get()\l+ niptuck()\l+ operator=()\l+ pop()\l+ size()\l+ ~BlockList()\l}" alt="" coords="1917,481,2093,749"/>
</map>
